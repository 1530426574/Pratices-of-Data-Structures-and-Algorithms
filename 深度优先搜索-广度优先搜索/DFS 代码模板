深度遍历是先走通一个树枝再说，然后在回溯，所以用到了stack
最开始的根节点如果有left,right2个节点，
那么，right这个节点在left这个分支走完之前会一直被压在栈底。
|  2   |
|  2   |
|right |
|_______|

#递归写法
visited = set()
def dfs(node, visited):
    if node in visited: # terminator
    	# already visited
    	return

	visited.add(node)

	# process current node here.
	...
	for next_node in node.children():
		if next_node not in visited:
			dfs(next_node, visited)

#非递归写法
def DFS(self, tree):
	if tree.root is None:
		return []
	visited, stack = [], [tree.root]
	while stack:
		node = stack.pop()
		visited.add(node)
		process (node)
		nodes = generate_related_nodes(node)
		stack.push(nodes)
	# other processing work
	...
